### CORS(Cross-Origin Resource Sharing)
-한 origin에서 실행중인 웹 어플리케이션이 다른 출처의 리소스에 접근할 수 있도록 허용하는 메커니즘

- CORS는 클라이언트 측 보안정책이다.
  주로 브라우저가 JS를 통해 외부 서버에 API를 요청할 때 적용

- 하지만, 서버에서 다른 서버로의 API요청은 CORS 정책의 적용을 받지 않는다.
  즉, 서버 대 서버 통신에서는 CORS가 브라우저 처럼 중재하지 않기 때문에 제한없이 자유롭게 통신할 수 있다.

### 요청 방식에 따라 다른 CORS발생 여부
1. <img> , <video> , <script> , <link> 태그 등
 (기본적으로 Cross-Origin 정책을 지원한다.)
- <link> 태그의 href 에서 다른 사이트의 .css 리소스에 접근하는 것이 가능하다.
- <img> 태그의 scr 에서 다른 사이트의 .png , .jpg 등의 리소스에 접근하는 것이 가능하다.
- <script> 태그의 src 에서 다른 사이트의 .js 리소스에 접근하는 것이 가능
 ( type = "module" 속성은 제외)
```html
<link rel = "stylesheet" href = "..." />
<script src = "..."></script>
<img src = "..." />
```
2. XMLHttpRequest , Fetch API 스크립트
 (기본적으로 Same-Origin 정책을 따른다.)
- 다른 도메인의 소스에 대해 자바스크립트 ajax 요청 API호출시
- 웹 폰트 CSS파일 내 @front-face 에서 다른 도메인의 폰트 사용시

- 자바스크립트에서의 요청은 <u>서로 다른 도메인에 대한 요청을 보안상 제한한다.</u> 
  브라우저는 기본적으로 하나의 서버 연결만 허용되도록 설정되어 있기 때문이다.

### Same-Origin Policy(동일 출처 정책)
1. 어떤 출처에서 불러운 분서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용 하는 것을 제한하는 보안방식
2. 동일 출처 정책은 잠재적으로 해로울 수 있는 문서를 분리해 , 공격받을 수 있는 경로를 줄인다.
3. <u>웹 브라우저 보안을 위해 프로토콜,호스트,포트가 동일한 서버로만 ajax 요청을 주고 받을 수 있도록 한 정책</u>
3-1. 프로토콜, 호스트, 포트
- 현재 페이지에서 개발자도구(f12)를 열고 "location"을 입력하면 확인가능하다.


  
